#
# def my_func(food):
#     for x in food:
#         print(x)
#
# fruits22 = ["Apple", "banana","cherry"]
#
# my_func(fruits22)
#
#
#
# def myfunction(x):
#     return 5 * x
#
# print(myfunction(3))
# print(myfunction(4))
# print(myfunction(8))
#
# def my__function(chaild1,chaild2,chaild3):
#     print("The greatest chaild is" + chaild3)
#
#
# my__function(chaild1="email",chaild2="Tobais",chaild3= " Linus")
#
#
# def myfunction(*kids):
#  print("The youngest child is " + kids[2])
#
# myfunction("email", "Tobais", "Linus")

#
# def try_Re(k):
#     if(k>0):
#         result = k+ try_Re(k-1)
#         print(result)
#     else:
#         result = 0
#     return result
#
# print("\n\nRe Example Result:")
# try_Re(10) # Here it's mean call try_Recursion Six times.
#
#
# print("------------------------------------------------------------------------")
#
#
# x =lambda a, s : a *s
# print(x(5,6))
#
#
# print("------------------------------------------------------------------------")
#
#
# x =lambda a, s, c: a + s + c
# print(x(5,6,2))
#
#
# print("------------------------------------------------------------------------")
#
#
# x =lambda a, s : a *s
# print(x(5,6))
#

# def myfunction(n):
#     return lambda a: a * n
#
# mydoubler = myfunction(2)
#
# print(mydoubler(11))
#
#
# def myfunction(n):
#     return lambda a: a * n
#
# mydoubler = myfunction(2)
# mytripler = myfunction(3)
# print(mydoubler(11))
# print(mytripler(11))

#
# cars = ["Ford" , "Volvo", "BMW"]
#
# x = cars[0]
# print(x)
#
#
# Cars = ["Ford" , "Volvo", "BMW"]
#
# x = len(cars)
#
# print(x)
#
#
#
# Cars = ["Ford" , "Volvo", "BMW"]
#
# cars.append("Ahmad")
#
# print(cars)
#
# cars = ["Ford" , "Volvo", "BMW"]
#
# cars.pop(0)
#
# print(cars)

#
# print("======================================Exam=============================")
#
# # THIS IS RECURSION POWER FUNCTION
# def myRecur(x,n):
#     if(n==1):
#         return x
#     else:
#         return x*myRecur(x,n-1)
#
# print("\n The Result is")
# print (myRecur(5,3))
#
#
#
#
#
# # THIS IS A LAMDA EXPRESSTION YO REARRANGE POSITIVE NUMBERS
# x = 0
# array = [-4, -6,-1, 2, 3, 7, 9, 88]
#
# array = [x for x in array if x >0]
#
# print(array)

class myclass:
    x= 5

print(myclass)



class myclass:
    x = 5
p1 = myclass()
print(p1.x)



class preson:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p1 = preson("Johan", 36)

print(p1.name, p1.age)





class mySelf:
    def __init__(Myself1 , name , age):
        Myself1.name = name
        Myself1.age = age

p1 = mySelf("Ahmad" , "100")

print(p1.name)





class mySelf:
    def __init__(Myself1 , name , age):
        Myself1.name = name
        Myself1.age = age

    def myfunc(self):
        print("Hello my name is "+ self.name + "\tand my Age is" +  self.age)
p1 = mySelf("Ahmad" , "100")
p1.myfunc()




